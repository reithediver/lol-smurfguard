declare const RiotGamesDataRegion: {
    readonly AMERICAS: "AMERICAS";
    readonly ASIA: "ASIA";
    readonly EUROPE: "EUROPE";
    readonly ESPORTS: "ESPORTS";
};
/**
 * The region of the Riot Games accounts.
 */
type RiotGamesRegionDataType = (typeof RiotGamesDataRegion)[keyof typeof RiotGamesDataRegion];
interface LeagueOfLegendsAPIOptions {
    /**
     * Riot Games API token which can be obtained by following the link: https://developer.riotgames.com
     */
    token: string;
    /**
     * The API region where the requests will be sent.
     */
    region: RiotGamesAPIRegion;
}
type RiotGamesAPIRegion = 'br1' | 'eun1' | 'euw1' | 'jp1' | 'kr' | 'la1' | 'la2' | 'na1' | 'oc1' | 'ph1' | 'ru' | 'sg2' | 'th2' | 'tr1' | 'tw2' | 'vn2';

declare class Fetcher {
    private readonly options;
    private readonly apiUrl;
    constructor(options: LeagueOfLegendsAPIOptions, apiUrl: string);
    get<T>(url: string, region?: string): Promise<T>;
}

interface LeagueOfLegendsPlatformStatusContent {
    locale: string;
    content: string;
}
interface LeagueOfLegendsPlatformStatusUpdate {
    id: number;
    author: string;
    publish: boolean;
    publish_locations: string[];
    translations: LeagueOfLegendsPlatformStatusContent[];
    created_at: string;
    updated_at: string;
}
interface LeagueOfLegendsPlatformStatus {
    id: number;
    maintenance_status: string;
    incident_severity: string;
    titles: LeagueOfLegendsPlatformStatusContent[];
    updates: LeagueOfLegendsPlatformStatusUpdate[];
    created_at: string;
    archive_at: string;
    updated_at: string;
    platforms: string[];
}
interface LeagueOfLegendsPlatformStatusData {
    id: string;
    name: string;
    locales: string[];
    maintenances: LeagueOfLegendsPlatformStatus[];
    incidents: LeagueOfLegendsPlatformStatus[];
}

declare class LeagueOfLegendsPlatformStatusApi {
    private readonly fetcher;
    constructor(fetcher: Fetcher);
    get(): Promise<LeagueOfLegendsPlatformStatusData>;
}

interface LeagueOfLegendsSpectatorObserver {
    encryptionKey: string;
}
interface LeagueOfLegendsSpectatorBannedChampion {
    pickTurn: number;
    championId: number;
    teamId: number;
}
interface LeagueOfLegendsSpectatorParticipantPerks {
    perkIds: number[];
    perkStyle: number;
    perkSubStyle: number;
}
interface LeagueOfLegendsSpectatorCustomizationObject {
    category: string;
    content: string;
}
interface LeagueOfLegendsSpectatorParticipant {
    championId: number;
    perks: LeagueOfLegendsSpectatorParticipantPerks;
    profileIconId: string;
    bot: boolean;
    teamId: number;
    summonerName: string;
    summonerId: string;
    puuid: string;
    spell1Id: number;
    spell2Id: number;
    gameCustomizationObjects: LeagueOfLegendsSpectatorCustomizationObject[];
}
interface LeagueOfLegendsSpectatorCurrentGame {
    gameId: number;
    gameType: string;
    gameStartTime: bigint;
    mapId: number;
    gameLength: number;
    platformId: string;
    gameMode: string;
    bannedChampions: LeagueOfLegendsSpectatorBannedChampion[];
    gameQueueConfigId: number;
    observers: LeagueOfLegendsSpectatorObserver;
    participants: LeagueOfLegendsSpectatorParticipant[];
}
interface LeagueOfLegendsSpectatorFeaturedGames {
    gameList: LeagueOfLegendsSpectatorCurrentGame[];
    clientRefreshInterval: number;
}

declare class LeagueOfLegendsSpectatorApi {
    private readonly fetcher;
    constructor(fetcher: Fetcher);
    getBySummonerId(summonerId: string): Promise<LeagueOfLegendsSpectatorCurrentGame>;
    getFeaturedGames(): Promise<LeagueOfLegendsSpectatorFeaturedGames>;
}

declare const LeagueOfLegendsGameMode: {
    readonly RANKED_SOLO_5x5: "RANKED_SOLO_5x5";
    readonly RANKED_TFT: "RANKED_TFT";
    readonly RANKED_FLEX_SR: "RANKED_FLEX_SR";
    readonly RANKED_FLEX_TT: "RANKED_FLEX_TT";
};
/**
 * League of Legends game modes.
 */
type LeagueOfLegendsGameModeType = (typeof LeagueOfLegendsGameMode)[keyof typeof LeagueOfLegendsGameMode];
declare const LeagueOfLegendsBaseRank: {
    readonly IRON: "IRON";
    readonly BRONZE: "BRONZE";
    readonly SILVER: "SILVER";
    readonly GOLD: "GOLD";
    readonly PLATINUM: "PLATINUM";
    readonly EMERALD: "EMERALD";
    readonly DIAMOND: "DIAMOND";
};
/**
 * A list of the basic ranks of the League of Legends.
 */
type LeagueOfLegendsBaseRankType = (typeof LeagueOfLegendsBaseRank)[keyof typeof LeagueOfLegendsBaseRank];
declare const LeagueOfLegendsHighRank: {
    readonly MASTER: "MASTER";
    readonly GRANDMASTER: "GRANDMASTER";
    readonly CHALLENGER: "CHALLENGER";
};
declare const LeagueOfLegendsRank: {
    readonly MASTER: "MASTER";
    readonly GRANDMASTER: "GRANDMASTER";
    readonly CHALLENGER: "CHALLENGER";
    readonly IRON: "IRON";
    readonly BRONZE: "BRONZE";
    readonly SILVER: "SILVER";
    readonly GOLD: "GOLD";
    readonly PLATINUM: "PLATINUM";
    readonly EMERALD: "EMERALD";
    readonly DIAMOND: "DIAMOND";
};
/**
 * List of League of Legends ranks.
 */
type LeagueOfLegendsRankType = (typeof LeagueOfLegendsRank)[keyof typeof LeagueOfLegendsRank];
/**
 * Divisions of ranks in the League of Legends.
 *
 * The {@link LeagueOfLegendsHighRankType} do not have divisions.
 */
type LeagueOfLegendsRankDivision = 'I' | 'II' | 'III' | 'IV';
interface LeagueOfLegendsLeagueEntrySeries {
    /**
     * The number of losses.
     */
    losses: number;
    progress: string;
    target: number;
    /**
     * The number of wins.
     */
    wins: number;
}
interface LeagueOfLegendsLeagueEntry {
    leagueId: string;
    summonerId: string;
    summonerName: string;
    queueType: LeagueOfLegendsGameModeType;
    tier: LeagueOfLegendsRankType;
    rank: LeagueOfLegendsRankDivision;
    leaguePoints: number;
    wins: number;
    losses: number;
    hotStreak: boolean;
    veteran: boolean;
    freshBlood: boolean;
    inactive: boolean;
    miniSeries?: LeagueOfLegendsLeagueEntrySeries;
}

declare class LeagueOfLegendsLeagueExpApi {
    private readonly fetcher;
    constructor(fetcher: Fetcher);
    getEntries(queue: LeagueOfLegendsGameModeType, tier: LeagueOfLegendsRankType, division: LeagueOfLegendsRankDivision, page?: number): Promise<LeagueOfLegendsLeagueEntry>;
}

interface LeagueOfLegendsChampionRotation {
    /**
     * List of ids of champions available for free.
     */
    freeChampionIds: number[];
    /**
     * List of ids of available champions for players whose level is equal to
     * or less than the value of the maxNewPlayerLevel field
     */
    freeChampionIdsForNewPlayers: number[];
    /**
     * The maximum account level at which more free champions are available
     * than in the freeChampionIds field.
     */
    maxNewPlayerLevel: number;
}

declare class LeagueOfLegendsChampionApi {
    private readonly fetcher;
    constructor(fetcher: Fetcher);
    getRotations(): Promise<LeagueOfLegendsChampionRotation>;
}

interface LeagueOfLegendsSummoner {
    /**
     * The unique ID of the summoner.
     */
    id: string;
    /**
     * The account ID of the summoner.
     */
    accountId: string;
    /**
     * Player Universally Unique ID.
     */
    puuid: string;
    /**
     * The name of the summoner.
     */
    name: string;
    /**
     * The ID of the summoner's profile icon.
     */
    profileIconId: number;
    /**
     * The date of the last change in the summoner's profile.
     * The following events will update this timestamp:
     * profile icon change, playing the tutorial or advanced tutorial,
     * finishing a game, summoner name change
     */
    revisionDate: bigint;
    /**
     * The summoner's level.
     */
    summonerLevel: number;
}

declare class LeagueOfLegendsSummonerApi {
    private readonly fetcher;
    constructor(fetcher: Fetcher);
    getByAccountId(accountId: string): Promise<LeagueOfLegendsSummoner>;
    getByName(summonerName: string): Promise<LeagueOfLegendsSummoner>;
    getByPUUID(puuid: string): Promise<LeagueOfLegendsSummoner>;
    getById(summonerId: string): Promise<LeagueOfLegendsSummoner>;
}

type LeagueOfLegendsLeagueGameMode = Omit<typeof LeagueOfLegendsGameMode, 'RANKED_TFT'>;
interface LeagueList {
    /**
     * The rank of the legends to be obtained.
     */
    tier: LeagueOfLegendsRankType;
    /**
     * The ID of the legend.
     */
    leagueId: string;
    queue: LeagueOfLegendsLeagueGameMode;
    name: string;
    entries: LeagueOfLegendsLeagueEntry[];
}

declare class LeagueOfLegendsLeagueApi {
    private readonly fetcher;
    constructor(fetcher: Fetcher);
    getChallengers(queue: LeagueOfLegendsLeagueGameMode): Promise<LeagueList>;
    getGrandMasters(queue: LeagueOfLegendsLeagueGameMode): Promise<LeagueList>;
    getMasters(queue: LeagueOfLegendsLeagueGameMode): Promise<LeagueList>;
    getBySummonerId(summonerId: string): Promise<LeagueOfLegendsLeagueEntry[]>;
    getById(leagueId: string): Promise<LeagueList>;
    getEntries(queue: LeagueOfLegendsLeagueGameMode, tier: LeagueOfLegendsBaseRankType, division: LeagueOfLegendsRankDivision, page?: number): Promise<LeagueOfLegendsLeagueEntry[]>;
}

declare const LeagueOfLegendsClashPlayerPosition: {
    readonly UNSELECTED: "UNSELECTED";
    readonly FILL: "FILL";
    readonly TOP: "TOP";
    readonly JUNGLE: "JUNGLE";
    readonly MIDDLE: "MIDDLE";
    readonly BOTTOM: "BOTTOM";
    readonly UTILITY: "UTILITY";
};
type LeagueOfLegendsClashPlayerPositionType = (typeof LeagueOfLegendsClashPlayerPosition)[keyof typeof LeagueOfLegendsClashPlayerPosition];
declare const LeagueOfLegendsClashPlayerRole: {
    readonly CAPTAIN: "CAPTAIN";
    readonly MEMBER: "MEMBER";
};
type LeagueOfLegendsClashPlayerRoleType = (typeof LeagueOfLegendsClashPlayerRole)[keyof typeof LeagueOfLegendsClashPlayerRole];
interface LeagueOfLegendsClashPlayer {
    /**
     * The unique ID of the summoner.
     */
    summonerId: string;
    /**
     * The ID of the Clash team.
     */
    teamId: string;
    /**
     * The position of the player in the Clash.
     */
    position: LeagueOfLegendsClashPlayerPositionType;
    /**
     * The role of the player in the team.
     */
    role: LeagueOfLegendsClashPlayerRoleType;
}
interface LeagueOfLegendsClashTeam {
    /**
     * The ID of the Clash team.
     */
    id: string;
    /**
     * Tournament ID.
     */
    tournamentId: number;
    /**
     * The name of the Clash team.
     */
    name: string;
    /**
     * The ID of the Clash team icon.
     */
    iconId: number;
    /**
     * The tier of the Clash team.
     */
    tier: number;
    /**
     * The unique ID of the summoner, the captain of the Clash team.
     */
    captain: string;
    /**
     * The abbreviation of the Clash command.
     */
    abbreviation: string;
    /**
     * The players of the Clash team.
     */
    players: LeagueOfLegendsClashPlayer[];
}
interface LeagueOfLegendsClashTournament {
    /**
     * Tournament ID.
     */
    id: number;
    /**
     * The ID of the Clash tournament theme.
     */
    themeId: string;
    /**
     * The first part of the Clash tournament name, for example "Freljord".
     */
    nameKey: string;
    /**
     * The second part of the name of the Clash tournament, where the day is usually indicated.
     */
    nameKeySecondary: string;
    /**
     * The schedule of the Clash tournament.
     */
    schedule: LeagueOfLegendsClashTournamentSchedule[];
}
interface LeagueOfLegendsClashTournamentSchedule {
    /**
     * The ID of the Clash tournament schedule.
     */
    id: number;
    /**
     * Time of registration for the Clash tournament.
     */
    registrationTime: bigint;
    /**
     * The start time of the Clash tournament.
     */
    startTime: bigint;
    /**
     * The cancellation status of the Clash tournament.
     */
    cancelled: boolean;
}

declare class LeagueOfLegendsClashApi {
    private readonly fetcher;
    constructor(fetcher: Fetcher);
    getPlayersBySummonerId(summonerId: string): Promise<LeagueOfLegendsClashPlayer[]>;
    getTeamById(teamId: string): Promise<LeagueOfLegendsClashTeam>;
    getTournaments(): Promise<LeagueOfLegendsClashTournament[]>;
    getTournamentByTeamId(teamId: string): Promise<LeagueOfLegendsClashTournament>;
    getTournamentById(tournamentId: string): Promise<LeagueOfLegendsClashTournament>;
}

declare const LeagueOfLegendsMatchQueue: {
    readonly RANKED: "ranked";
    readonly NORMAL: "normal";
    readonly TOURNEY: "tourney";
    readonly TUTORIAL: "tutorial";
};
type LeagueOfLegendsMatchQueueType = (typeof LeagueOfLegendsMatchQueue)[keyof typeof LeagueOfLegendsMatchQueue];
interface LeagueOfLegendsMatchMetadata {
    dataVersion: string;
    matchId: string;
    participants: string[];
}
interface LeagueOfLegendsMatchParticipantPerkStyleSelection {
    perk: number;
    var1: number;
    var2: number;
    var3: number;
}
interface LeagueOfLegendsMatchParticipantPerkStyle {
    description: string;
    selections: LeagueOfLegendsMatchParticipantPerkStyleSelection[];
    style: number;
}
interface LeagueOfLegendsMatchParticipantPerkStats {
    defense: number;
    flex: number;
    offense: number;
}
interface LeagueOfLegendsMatchParticipantPerks {
    statPerks: LeagueOfLegendsMatchParticipantPerkStats;
    styles: LeagueOfLegendsMatchParticipantPerkStyle[];
}
interface LeagueOfLegendsMatchParticipant {
    assists: number;
    baronKills: number;
    bountyLevel: number;
    champExperience: number;
    champLevel: number;
    championId: number;
    championName: string;
    championTransform: number;
    consumablesPurchased: number;
    damageDealtToBuildings: number;
    damageDealtToObjectives: number;
    damageDealtToTurrets: number;
    damageSelfMitigated: number;
    deaths: number;
    detectorWardsPlaced: number;
    doubleKills: number;
    dragonKills: number;
    firstBloodAssist: boolean;
    firstBloodKill: boolean;
    firstTowerAssist: boolean;
    firstTowerKill: boolean;
    gameEndedInEarlySurrender: boolean;
    gameEndedInSurrender: boolean;
    goldEarned: number;
    goldSpent: number;
    individualPosition: string;
    inhibitorKills: number;
    inhibitorTakedowns: number;
    inhibitorsLost: number;
    item0: number;
    item1: number;
    item2: number;
    item3: number;
    item4: number;
    item5: number;
    item6: number;
    itemsPurchased: number;
    killingSprees: number;
    kills: number;
    lane: string;
    largestCriticalStrike: number;
    largestKillingSpree: number;
    largestMultiKill: number;
    longestTimeSpentLiving: number;
    magicDamageDealt: number;
    magicDamageDealtToChampions: number;
    magicDamageTaken: number;
    neutralMinionsKilled: number;
    nexusKills: number;
    nexusTakedowns: number;
    nexusLost: number;
    objectivesStolen: number;
    objectivesStolenAssists: number;
    participantId: number;
    pentaKills: number;
    perks: LeagueOfLegendsMatchParticipantPerks;
    physicalDamageDealt: number;
    physicalDamageDealtToChampions: number;
    physicalDamageTaken: number;
    profileIcon: number;
    puuid: string;
    quadraKills: number;
    riotIdName: string;
    riotIdTagline: string;
    role: string;
    sightWardsBoughtInGame: number;
    spell1Casts: number;
    spell2Casts: number;
    spell3Casts: number;
    spell4Casts: number;
    summoner1Casts: number;
    summoner1Id: number;
    summoner2Casts: number;
    summoner2Id: number;
    summonerId: string;
    summonerLevel: number;
    summonerName: string;
    teamEarlySurrendered: boolean;
    teamId: number;
    teamPosition: string;
    timeCCingOthers: number;
    timePlayed: number;
    totalDamageDealt: number;
    totalDamageDealtToChampions: number;
    totalDamageShieldedOnTeammates: number;
    totalDamageTaken: number;
    totalHeal: number;
    totalHealsOnTeammates: number;
    totalMinionsKilled: number;
    totalTimeCCDealt: number;
    totalTimeSpentDead: number;
    totalUnitsHealed: number;
    tripleKills: number;
    trueDamageDealt: number;
    trueDamageDealtToChampions: number;
    trueDamageTaken: number;
    turretKills: number;
    turretTakedowns: number;
    turretsLost: number;
    unrealKills: number;
    visionScore: number;
    visionWardsBoughtInGame: number;
    wardsKilled: number;
    wardsPlaced: number;
    win: boolean;
}
interface LeagueOfLegendsMatchTeamBan {
    championId: number;
    pickTurn: number;
}
interface LeagueOfLegendsMatchTeamObjective {
    first: boolean;
    kills: number;
}
interface LeagueOfLegendsMatchTeamObjectives {
    baron: LeagueOfLegendsMatchTeamObjective;
    champion: LeagueOfLegendsMatchTeamObjective;
    dragon: LeagueOfLegendsMatchTeamObjective;
    inhibitor: LeagueOfLegendsMatchTeamObjective;
    riftHerald: LeagueOfLegendsMatchTeamObjective;
    tower: LeagueOfLegendsMatchTeamObjective;
}
interface LeagueOfLegendsMatchTeam {
    bans: LeagueOfLegendsMatchTeamBan[];
    objectives: LeagueOfLegendsMatchTeamObjectives;
    teamId: number;
    win: boolean;
}
interface LeagueOfLegendsMatchInfo {
    gameCreation: bigint;
    gameDuration: number;
    gameEndTimestamp: bigint;
    gameId: number;
    gameMode: string;
    gameName: string;
    gameStartTimestamp: bigint;
    gameType: string;
    gameVersion: string;
    mapId: number;
    participants: LeagueOfLegendsMatchParticipant[];
    platformId: string;
    queueId: number;
    teams: LeagueOfLegendsMatchTeam[];
    tournamentCode: string;
}
interface LeagueOfLegendsMatchTimelineFrameParticipantChampionStats {
    abilityHaste: number;
    abilityPower: number;
    armor: number;
    armorPen: number;
    armorPenPercent: number;
    attackDamage: number;
    attackSpeed: number;
    bonusArmorPenPercent: number;
    bonusMagicPenPercent: number;
    ccReduction: number;
    cooldownReduction: number;
    health: number;
    healthMax: number;
    healthRegen: number;
    lifesteal: number;
    magicPen: number;
    magicPenPercent: number;
    magicResist: number;
    movementSpeed: number;
    omnivamp: number;
    physicalVamp: number;
    power: number;
    powerMax: number;
    powerRegen: number;
    spellVamp: number;
}
interface LeagueOfLegendsMatchTimelineFrameParticipantDamageStats {
    magicDamageDone: number;
    magicDamageDoneToChampions: number;
    magicDamageTaken: number;
    physicalDamageDone: number;
    physicalDamageDoneToChampions: number;
    physicalDamageTaken: number;
    totalDamageDone: number;
    totalDamageDoneToChampions: number;
    totalDamageTaken: number;
    trueDamageDone: number;
    trueDamageDoneToChampions: number;
    trueDamageTaken: number;
}
interface LeagueOfLegendsMatchTimelineFrameParticipantPosition {
    x: number;
    y: number;
}
interface LeagueOfLegendsMatchTimelineFrameParticipant {
    championStats: LeagueOfLegendsMatchTimelineFrameParticipantChampionStats;
    currentGold: number;
    damageStats: LeagueOfLegendsMatchTimelineFrameParticipantDamageStats;
    goldPerSecond: number;
    jungleMinionsKilled: number;
    level: number;
    minionsKilled: number;
    participantId: number;
    position: LeagueOfLegendsMatchTimelineFrameParticipantPosition;
    timeEnemySpentControlled: number;
    totalGold: number;
    xp: number;
}
interface LeagueOfLegendsMatchTimelineEventVictimDamageReceived {
    basic: boolean;
    magicDamage: number;
    name: string;
    participantId: number;
    physicalDamage: number;
    spellName: string;
    spellSlot: number;
    trueDamage: number;
    type: string;
}
interface LeagueOfLegendsMatchTimelineEventVictimDamageDealt {
    basic: boolean;
    magicDamage: number;
    name: string;
    participantId: number;
    physicalDamage: number;
    spellName: string;
    spellSlot: number;
    trueDamage: number;
    type: string;
}
interface LeagueOfLegendsMatchTimelineEvent {
    realTimestamp: bigint;
    timestamp: number;
    type: string;
    itemId: number;
    participantId: number;
    afterId: number;
    beforeId: number;
    goldGain: number;
    levelUpType: string;
    skillSlot: number;
    creatorId: number;
    wardType: string;
    level: number;
    assistingParticipantIds: number[];
    bounty: number;
    killStreakLength: number;
    killerId: number;
    position: LeagueOfLegendsMatchTimelineFrameParticipantPosition;
    victimDamageDealt: LeagueOfLegendsMatchTimelineEventVictimDamageDealt[];
    victimDamageReceived: LeagueOfLegendsMatchTimelineEventVictimDamageReceived[];
    victimId: number;
    killType: string;
    laneType: string;
    teamId: number;
    killerTeamId: number;
    monsterSubType: string;
    monsterType: string;
    multiKillLength: number;
    buildingType: string;
    towerType: string;
    gameId: number;
    winningTeam: number;
}
interface LeagueOfLegendsMatchTimelineParticipant {
    participantId: number;
    puuid: string;
}
interface LeagueOfLegendsMatchTimelineFrame {
    events: LeagueOfLegendsMatchTimelineEvent[];
    participantFrames: {
        [key in string]: LeagueOfLegendsMatchTimelineFrameParticipant;
    };
    timestamp: number;
}
interface LeagueOfLegendsMatchTimelineInfo {
    frameInterval: number;
    frames: LeagueOfLegendsMatchTimelineFrame[];
    gameId: number;
    participants: LeagueOfLegendsMatchTimelineParticipant[];
}
interface LeagueOfLegendsMatch {
    metadata: LeagueOfLegendsMatchMetadata;
    info: LeagueOfLegendsMatchInfo;
}
interface LeagueOfLegendsMatchTimeline {
    metadata: LeagueOfLegendsMatchMetadata;
    info: LeagueOfLegendsMatchTimelineInfo;
}

declare class LeagueOfLegendsMatchApi {
    private readonly fetcher;
    constructor(fetcher: Fetcher);
    getById(matchId: string, region: RiotGamesRegionDataType): Promise<LeagueOfLegendsMatch>;
    getTimelineById(matchId: string, region: RiotGamesRegionDataType): Promise<LeagueOfLegendsMatchTimeline>;
    getIdsByPUUID(puuid: string, region: RiotGamesRegionDataType, params?: {
        startTime?: number;
        endTime?: number;
        queue?: number;
        type?: LeagueOfLegendsMatchQueueType;
        start?: number;
        count?: number;
    }): Promise<string[]>;
}

declare class LeagueOfLegendsAPI {
    private readonly url;
    status: LeagueOfLegendsPlatformStatusApi;
    spectator: LeagueOfLegendsSpectatorApi;
    leagueExp: LeagueOfLegendsLeagueExpApi;
    champion: LeagueOfLegendsChampionApi;
    summoner: LeagueOfLegendsSummonerApi;
    league: LeagueOfLegendsLeagueApi;
    clash: LeagueOfLegendsClashApi;
    match: LeagueOfLegendsMatchApi;
    constructor(options: LeagueOfLegendsAPIOptions);
}

export { LeagueOfLegendsBaseRank, LeagueOfLegendsClashPlayerPosition, LeagueOfLegendsClashPlayerRole, LeagueOfLegendsGameMode, LeagueOfLegendsHighRank, LeagueOfLegendsMatchQueue, LeagueOfLegendsRank, RiotGamesDataRegion, LeagueOfLegendsAPI as default };
