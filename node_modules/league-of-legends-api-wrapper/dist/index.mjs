// src/fetcher.ts
var LeagueOfLegendsAPIBadResponseException = class extends Error {
  constructor(message, cause) {
    super(message, {
      cause
    });
    this.message = message;
    this.cause = cause;
  }
};
var Fetcher = class {
  constructor(options, apiUrl) {
    this.options = options;
    this.apiUrl = apiUrl;
  }
  async get(url, region) {
    const response = await fetch(`https://${region || this.options.region}.${this.apiUrl}/${url}`, {
      headers: {
        "X-Riot-Token": this.options.token
      }
    });
    const json = await response.json();
    if (!response.ok)
      throw new LeagueOfLegendsAPIBadResponseException(json?.status?.message || "Unknown error.", json);
    return json;
  }
};
var fetcher_default = Fetcher;

// src/api/LOL-STATUS-V4/index.ts
var LeagueOfLegendsPlatformStatusApi = class {
  constructor(fetcher) {
    this.fetcher = fetcher;
  }
  async get() {
    return await this.fetcher.get("lol/status/v4/platform-data");
  }
};

// src/api/SPECTATOR-V4/index.ts
var LeagueOfLegendsSpectatorApi = class {
  constructor(fetcher) {
    this.fetcher = fetcher;
  }
  async getBySummonerId(summonerId) {
    return await this.fetcher.get(
      `lol/spectator/v4/active-games/by-summoner/${summonerId}`
    );
  }
  async getFeaturedGames() {
    return await this.fetcher.get("lol/spectator/v4/featured-games");
  }
};

// src/api/LEAGUE-EXP-V4/index.ts
var LeagueOfLegendsLeagueExpApi = class {
  constructor(fetcher) {
    this.fetcher = fetcher;
  }
  async getEntries(queue, tier, division, page = 1) {
    return await this.fetcher.get(
      `lol/league-exp/v4/entries/${queue}/${tier}/${division}?page=${page}`
    );
  }
};

// src/api/CHAMPION-V3/index.ts
var LeagueOfLegendsChampionApi = class {
  constructor(fetcher) {
    this.fetcher = fetcher;
  }
  async getRotations() {
    return await this.fetcher.get(`lol/platform/v3/champion-rotations`);
  }
};

// src/api/SUMMONER-V4/index.ts
var LeagueOfLegendsSummonerApi = class {
  constructor(fetcher) {
    this.fetcher = fetcher;
  }
  async getByAccountId(accountId) {
    return await this.fetcher.get(`lol/summoner/v4/summoners/by-account/${accountId}`);
  }
  async getByName(summonerName) {
    return await this.fetcher.get(`lol/summoner/v4/summoners/by-name/${summonerName}`);
  }
  async getByPUUID(puuid) {
    return await this.fetcher.get(`lol/summoner/v4/summoners/by-puuid/${puuid}`);
  }
  async getById(summonerId) {
    return await this.fetcher.get(`lol/summoner/v4/summoners/${summonerId}`);
  }
};

// src/api/LEAGUE-V4/index.ts
var LeagueOfLegendsLeagueApi = class {
  constructor(fetcher) {
    this.fetcher = fetcher;
  }
  async getChallengers(queue) {
    return await this.fetcher.get(`lol/league/v4/challengerleagues/by-queue/${queue}`);
  }
  async getGrandMasters(queue) {
    return await this.fetcher.get(`lol/league/v4/grandmasterleagues/by-queue/${queue}`);
  }
  async getMasters(queue) {
    return await this.fetcher.get(`lol/league/v4/masterleagues/by-queue/${queue}`);
  }
  async getBySummonerId(summonerId) {
    return await this.fetcher.get(`lol/league/v4/entries/by-summoner/${summonerId}`);
  }
  async getById(leagueId) {
    return await this.fetcher.get(`lol/league/v4/leagues/${leagueId}`);
  }
  async getEntries(queue, tier, division, page = 1) {
    return await this.fetcher.get(
      `lol/league/v4/entries/${queue}/${tier}/${division}?page=${page}`
    );
  }
};

// src/api/CLASH-V1/index.ts
var LeagueOfLegendsClashApi = class {
  constructor(fetcher) {
    this.fetcher = fetcher;
  }
  async getPlayersBySummonerId(summonerId) {
    return await this.fetcher.get(`lol/clash/v1/players/by-summoner/${summonerId}`);
  }
  async getTeamById(teamId) {
    return await this.fetcher.get(`lol/clash/v1/teams/${teamId}`);
  }
  async getTournaments() {
    return await this.fetcher.get(`lol/clash/v1/tournaments`);
  }
  async getTournamentByTeamId(teamId) {
    return await this.fetcher.get(`lol/clash/v1/tournaments/by-team/${teamId}`);
  }
  async getTournamentById(tournamentId) {
    return await this.fetcher.get(`lol/clash/v1/tournaments/${tournamentId}`);
  }
};

// src/api/MATCH-V5/index.ts
var LeagueOfLegendsMatchApi = class {
  constructor(fetcher) {
    this.fetcher = fetcher;
  }
  async getById(matchId, region) {
    return await this.fetcher.get(`lol/match/v5/matches/${matchId}`, region);
  }
  async getTimelineById(matchId, region) {
    return await this.fetcher.get(`lol/match/v5/matches/${matchId}/timeline`, region);
  }
  async getIdsByPUUID(puuid, region, params) {
    const query = new URLSearchParams();
    for (const key in params) {
      const param = params[key];
      if (param)
        query.append(`${key}`, `${param}`);
    }
    return await this.fetcher.get(`lol/match/v5/matches/by-puuid/${puuid}/ids?${query}`, region);
  }
};

// src/api/types.ts
var LeagueOfLegendsGameMode = {
  RANKED_SOLO_5x5: "RANKED_SOLO_5x5",
  RANKED_TFT: "RANKED_TFT",
  RANKED_FLEX_SR: "RANKED_FLEX_SR",
  RANKED_FLEX_TT: "RANKED_FLEX_TT"
};
var LeagueOfLegendsBaseRank = {
  IRON: "IRON",
  BRONZE: "BRONZE",
  SILVER: "SILVER",
  GOLD: "GOLD",
  PLATINUM: "PLATINUM",
  EMERALD: "EMERALD",
  DIAMOND: "DIAMOND"
};
var LeagueOfLegendsHighRank = {
  MASTER: "MASTER",
  GRANDMASTER: "GRANDMASTER",
  CHALLENGER: "CHALLENGER"
};
var LeagueOfLegendsRank = {
  ...LeagueOfLegendsBaseRank,
  ...LeagueOfLegendsHighRank
};

// src/api/CLASH-V1/types.ts
var LeagueOfLegendsClashPlayerPosition = {
  UNSELECTED: "UNSELECTED",
  FILL: "FILL",
  TOP: "TOP",
  JUNGLE: "JUNGLE",
  MIDDLE: "MIDDLE",
  BOTTOM: "BOTTOM",
  UTILITY: "UTILITY"
};
var LeagueOfLegendsClashPlayerRole = {
  CAPTAIN: "CAPTAIN",
  MEMBER: "MEMBER"
};

// src/api/MATCH-V5/types.ts
var LeagueOfLegendsMatchQueue = {
  RANKED: "ranked",
  NORMAL: "normal",
  TOURNEY: "tourney",
  TUTORIAL: "tutorial"
};

// src/types.ts
var RiotGamesDataRegion = {
  AMERICAS: "AMERICAS",
  ASIA: "ASIA",
  EUROPE: "EUROPE",
  ESPORTS: "ESPORTS"
};

// src/index.ts
var LeagueOfLegendsAPI = class {
  url = "api.riotgames.com";
  status;
  spectator;
  leagueExp;
  champion;
  summoner;
  league;
  clash;
  match;
  constructor(options) {
    const fetcher = new fetcher_default(options, this.url);
    this.status = new LeagueOfLegendsPlatformStatusApi(fetcher);
    this.spectator = new LeagueOfLegendsSpectatorApi(fetcher);
    this.leagueExp = new LeagueOfLegendsLeagueExpApi(fetcher);
    this.champion = new LeagueOfLegendsChampionApi(fetcher);
    this.summoner = new LeagueOfLegendsSummonerApi(fetcher);
    this.league = new LeagueOfLegendsLeagueApi(fetcher);
    this.clash = new LeagueOfLegendsClashApi(fetcher);
    this.match = new LeagueOfLegendsMatchApi(fetcher);
  }
};
var src_default = LeagueOfLegendsAPI;
export {
  LeagueOfLegendsBaseRank,
  LeagueOfLegendsClashPlayerPosition,
  LeagueOfLegendsClashPlayerRole,
  LeagueOfLegendsGameMode,
  LeagueOfLegendsHighRank,
  LeagueOfLegendsMatchQueue,
  LeagueOfLegendsRank,
  RiotGamesDataRegion,
  src_default as default
};
